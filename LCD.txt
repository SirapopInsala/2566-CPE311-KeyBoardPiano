#include "stm32l1xx.h"
#include "stm32l1xx_ll_system.h"
#include "stm32l1xx_ll_bus.h"
#include "stm32l1xx_ll_utils.h"
#include "stm32l1xx_ll_rcc.h"
#include "stm32l1xx_ll_pwr.h"
#include "stm32l1xx_ll_gpio.h"
#include "stm32l1xx_ll_tim.h"
#include "stm32l1xx_ll_lcd.h"
#include "stm32l1xx_ll_exti.h"
#include "stm32l1xx_ll_usart.h"
#include "stm32l152_glass_lcd.h"
#include "stdio.h"

void SystemClock_Config(void);
char disp_str[3];
int a=0;
int main(void)
{
	SystemClock_Config();
	LCD_GLASS_Init();
	
	//USER
	//A0
	LL_EXTI_InitTypeDef PA0_EXTI_InitStruct;
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA,LL_SYSCFG_EXTI_LINE0);
	PA0_EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
	PA0_EXTI_InitStruct.LineCommand = ENABLE;
	PA0_EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
	PA0_EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
	LL_EXTI_Init(&PA0_EXTI_InitStruct);
	NVIC_EnableIRQ((IRQn_Type)6);
	NVIC_SetPriority((IRQn_Type)6,0);
	
	while(1);
}

void EXTI0_IRQHandler(void)
{
	if(((EXTI->PR & (1<<0)) == 1) && a==0)
	{
		char disp_str[3] = "rec";
		LCD_GLASS_DisplayString((uint8_t*)disp_str);
		EXTI->PR |= (1<<0);
		a=1;
	}
	if(((EXTI->PR & (1<<0)) == 1) && a==1)
	{
		sprintf(disp_str, "%d  ", a);
		LCD_GLASS_DisplayString((uint8_t*)disp_str);
		EXTI->PR |= (1<<0);
		a=2;
	}
	if(((EXTI->PR & (1<<0)) == 1) && a==2)
	{
		sprintf(disp_str, "%d  ", a);
		LCD_GLASS_DisplayString((uint8_t*)disp_str);
		EXTI->PR |= (1<<0);
		a=3;
	}
	if(((EXTI->PR & (1<<0)) == 1) && a==3)
	{
		sprintf(disp_str, "%d  ", a);
		LCD_GLASS_DisplayString((uint8_t*)disp_str);
		EXTI->PR |= (1<<0);
		a=0;
	}
}

void SystemClock_Config(void)
{
  /* Enable ACC64 access and set FLASH latency */
  LL_FLASH_Enable64bitAccess();;
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);

  /* Set Voltage scale1 as MCU will run at 32MHz */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (LL_PWR_IsActiveFlag_VOSF() != 0)
  {
  };
 
  /* Enable HSI if not already activated*/
  if (LL_RCC_HSI_IsReady() == 0)
  {
    /* HSI configuration and activation */
    LL_RCC_HSI_Enable();
    while(LL_RCC_HSI_IsReady() != 1)
    {
    };
  }
 

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3);

  LL_RCC_PLL_Enable();
  while(LL_RCC_PLL_IsReady() != 1)
  {
  };
 
  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
  };
 
  /* Set APB1 & APB2 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  /* Set systick to 1ms in using frequency set to 32MHz                             */
  /* This frequency can be calculated through LL RCC macro                          */
  /* ex: __LL_RCC_CALC_PLLCLK_FREQ (HSI_VALUE, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3); */
  LL_Init1msTick(32000000);
 
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(32000000);
}
